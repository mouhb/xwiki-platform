<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.2" reference="Blog.ArchiveSheet" locale="">
  <web>Blog</web>
  <name>ArchiveSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1490559898000</creationDate>
  <parent>Blog.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1490563371000</date>
  <contentUpdateDate>1490563265000</contentUpdateDate>
  <version>1.1</version>
  <title>Blog Archive</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference="Blog.BlogCode"/}}

{{velocity filter="none"}}
{{html clean="false" wiki="true"}}
##
##
##
#macro(displayBlogFullArchive $targetDocument)
  #getAllBlogPostsQueryBasedOnDisplayContext($targetDocument $query $queryParams)
  #set ($discard = $queryParams.put('creator', $xcontext.user))
  #set ($query = "$!{query} and (doc.creator = :creator or (isPublished.value = 1 and hidden.value = 0))")
  ## Create a Jodatime date formatter that will be used to format dates
  #set($monthFormatter = $xwiki.jodatime.getDateTimeFormatterForPattern('MMMM'))
  #set($tempDate = $xwiki.jodatime.mutableDateTime)
  #set($currentYear = $xwiki.formatDate($datetool.date, 'yyyy'))
  #set($currentMonth = $xwiki.formatDate($datetool.date, 'M'))
  #set($firstYear = '')
  #set($lastYear = '')
  #set ($firstYearQueryObj = $services.query.hql("${query} order by year(publishDate.value)").setLimit(1).addFilter('unique'))
  #bindQueryParameters($firstYearQueryObj $queryParams)
  #foreach($firstEntry in $firstYearQueryObj.execute())
    #set($discard = $xwiki.getDocument($firstEntry))
    #getEntryObject($discard $entryObj)
    #getEntryDate($discard $entryObj $firstYear)
    #set($firstYear = $mathtool.toInteger($xwiki.formatDate($firstYear, 'yyyy')))
  #end
  #set ($lastYearQueryObj = $services.query.hql("${query} order by year(publishDate.value) desc").setLimit(1).addFilter('unique'))
  #bindQueryParameters($lastYearQueryObj $queryParams)
  #foreach($lastEntry in $lastYearQueryObj.execute())
    #set($discard = $xwiki.getDocument($lastEntry))
    #getEntryObject($discard $entryObj)
    #getEntryDate($discard $entryObj $lastYear)
    #set($lastYear = $mathtool.toInteger($xwiki.formatDate($lastYear, 'yyyy')))
  #end
  #if("$!{firstYear}" != '') ## At least one entry exists
    #foreach($year in [$firstYear..$lastYear])
      #set ($yearArticleCountQueryObj = $services.query.hql("${query} and year(publishDate.value) = $year").addFilter('unique'))
      #bindQueryParameters($yearArticleCountQueryObj $queryParams)
      #set($yearArticleCount = $yearArticleCountQueryObj.count())
      #if($yearArticleCount &gt; 0)
        #set ($queryString = "sheet=Blog.ArchiveSheet&amp;year=${year}")
        * [[$year ($yearArticleCount)&gt;&gt;${targetDocument.fullName}||queryString="${queryString}"]]
        #foreach($month in [1..12])
          #set ($statement = "${query} and year(publishDate.value) = $year and month(publishDate.value) = $month")
          #set ($monthArticleCountQueryObj = $services.query.hql($statement).addFilter('unique'))
          #bindQueryParameters($monthArticleCountQueryObj $queryParams)
          #set ($monthArticleCount = $monthArticleCountQueryObj.count())
          #if($monthArticleCount &gt; 0)
            $tempDate.setMonthOfYear($month)
            #set($queryString = "sheet=Blog.ArchiveSheet&amp;year=${year}&amp;month=${month}")
            ** [[$monthFormatter.print($tempDate) (${monthArticleCount})&gt;&gt;${targetDocument.fullName}||queryString="${queryString}"]]
          #end
        #end
      #end
    #end
  #else
    #info($services.localization.render('xe.blog.archive.noarticle'))
  #end
#end
##
##
##
#macro(displayBlogYearArchive $targetDocument $year)
= $services.localization.render('xe.blog.archive.postsyear', [$year]) =
  #getAllBlogPostsQueryBasedOnDisplayContext($targetDocument $query $queryParams)
  #set ($discard = $queryParams.put('creator', $xcontext.user))
  #set ($query = "$!{query} and (doc.creator = :creator or (isPublished.value = 1 and hidden.value = 0))")
  #set($query = "${query} and year(publishDate.value) = :year")
  #set ($discard = $queryParams.put('year', $mathtool.toInteger($year)))
  ## Create a Jodatime date formatter that will be used to format dates
  #set($monthFormatter = $xwiki.jodatime.getDateTimeFormatterForPattern('MMMM'))
  #set($tempDate = $xwiki.jodatime.mutableDateTime)
  #set ($yearArticleCountQueryObj = $services.query.hql($query).addFilter('unique'))
  #bindQueryParameters($yearArticleCountQueryObj $queryParams)
  #set($yearArticleCount = $yearArticleCountQueryObj.count())
  #if($yearArticleCount &gt; 0)
    #foreach($month in [1..12])
      #set ($monthArticleCountQueryObj = $services.query.hql("${query} and month(publishDate.value) = $month").addFilter('unique'))
      #bindQueryParameters($monthArticleCountQueryObj $queryParams)
      #set($monthArticleCount = $monthArticleCountQueryObj.count())
      #if($monthArticleCount &gt; 0)
        $tempDate.setMonthOfYear($month)
        #set($queryString = "sheet=Blog.ArchiveSheet&amp;year=${year}&amp;month=${month}")
== [[$monthFormatter.print($tempDate) (${monthArticleCount})&gt;&gt;${targetDocument.fullName}||queryString="${queryString}"]] ==
        #set ($monthArticleQueryObj = $services.query.hql("${query} and month(publishDate.value) = $month order by publishDate.value").addFilter('unique'))
        #bindQueryParameters($monthArticleQueryObj $queryParams)
        #foreach($entryDoc in $xwiki.wrapDocs($monthArticleQueryObj.execute()))
          #getEntryObject($entryDoc $entryObj)
          #isPublished($entryObj $isPublished)
          #isHidden($entryObj $isHidden)
          * [[$entryDoc.display('title', 'view', $entryObj)&gt;&gt;$entryDoc]]#if(!$isPublished) $services.localization.render('xe.blog.archive.unpublished')#elseif($isHidden) $services.localization.render('xe.blog.archive.hidden')#end

        #end
      #end
    #end
  #else
    #info($services.localization.render('xe.blog.archive.noarticlesyear'))
  #end
#end
##
##
##
#macro(displayBlogMonthArchive $targetDocument $year $month)
  #set($dateFormatter = $xwiki.jodatime.getDateTimeFormatterForPattern('MMMM yyyy'))
  #set($tempDate = $xwiki.jodatime.mutableDateTime)
  $tempDate.setYear($mathtool.toInteger($year))##
  $tempDate.setMonthOfYear($mathtool.toInteger($month))##
= $services.localization.render('xe.blog.archive.postsfor') $dateFormatter.print($tempDate) =
  #getAllBlogPostsQueryBasedOnDisplayContext($targetDocument $query $queryParams)
  #set ($discard = $queryParams.put('creator', $xcontext.user))
  #set ($query = "$!{query} and (doc.creator = :creator or (isPublished.value = 1 and hidden.value = 0))")
  #set($query = "${query} and year(publishDate.value) = :year and month(publishDate.value) = :month")
  #set ($discard = $queryParams.put('year', $mathtool.toInteger($year)))
  #set ($discard = $queryParams.put('month', $mathtool.toInteger($month)))
  #set ($monthArticleCountQueryObj = $services.query.hql($query).addFilter('unique'))
  #bindQueryParameters($monthArticleCountQueryObj $queryParams)
  #set($monthArticleCount = $monthArticleCountQueryObj.count())
  #if($monthArticleCount &gt; 0)
    #set ($monthArticleQueryObj = $services.query.hql("${query} order by publishDate.value").addFilter('unique'))
    #bindQueryParameters($monthArticleQueryObj $queryParams)
    #foreach($entryDoc in $xwiki.wrapDocs($monthArticleQueryObj.execute()))
      #getEntryObject($entryDoc $entryObj)
      #displayEntry($entryDoc $entryObj true true)
    #end
  #else
    #info($services.localization.render('xe.blog.archive.noarticlesmonth'))
  #end
#end
##
##
##
##
#set ($month = "$!{mathtool.toInteger($request.month)}")
#set ($year = "$!{mathtool.toInteger($request.year)}")
#if ($year == '')
  ## Show a brief history of the blog, a tree with first level = years, second level = months, and the number of entries from that year/month in every node.
  #displayBlogFullArchive($doc)
#else
  #if ($month == '')
    ## Show an index of all posts in this year (titles only), with month names as subtitles
    #displayBlogYearArchive($doc $year)
  #else
    ## Show all entries in the month (extract)
    #displayBlogMonthArchive($doc $year $month)
  #end
#end
{{/html}}
{{/velocity}}</content>
</xwikidoc>
